# **Rule: MVP Task Breakdown Generation**

### **1. Goal**

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format. This task list is generated by synthesizing all prior project documentation in the `/docs` direcrtory, and serves as the ultimate engineering plan for building the Minimum Viable Product (MVP).

The generated task list must provide clear, actionable guidance for developers, integrate comprehensive testing and security from the start, consider deployment and monitoring, and be fully traceable back to the project's strategic goals, design specifications, and technical architecture.

### **2. Process**

1.  **Comprehensive Document Analysis (Dependencies):** The process **MUST** begin with a thorough analysis of all five preceding documents in the `/docs/` folder (`/docs/01_create_brief_audience.md` through `/docs/05_create_technical_plan.md`).
2.  **Conduct Structured Discovery:** Use the clarifying questions below to resolve any ambiguities regarding scope, priority, and the technical environment.
3.  **Generate High-Level Parent Tasks:** Synthesize all inputs to create 4-6 high-level parent tasks that represent the major epics of work.
4.  **User Confirmation:** Present the high-level plan and pause for user review. Prompt with:
    > "I've outlined the high-level tasks for the MVP based on the project documentation. Please review them. Are you ready to proceed with generating the detailed sub-tasks? Respond with **'Go'** to continue."
5.  **Generate Detailed Sub-Tasks:** Upon receiving user confirmation ("Go"), generate the full, detailed task list with all sub-tasks for each parent task.
6.  **Final Quality Assurance:** Use the `Quality Assurance Framework` to ensure the final task list is coherent, complete, and actionable.
7.  **Save and Version:** Save the final comprehensive task list as `mvp_tasks.md` in the `/tasks/` directory.

### **3. Discovery Framework**

#### **Scope & Priority Clarification**

  * "This task list will focus strictly on the **In-Scope (Core MVP Features)** defined in `/docs/01_create_brief_audience.md`. Is that correct?"
  * "Are there any specific deadlines or sprint boundaries I should consider when structuring the tasks?"
  * "How many developers will be working on this? This will help in structuring tasks for potential parallel work."

#### **Technical Environment**

  * "What is the expected code coverage percentage for unit tests? Are there specific testing frameworks to use that weren't in the technical plan?"
  * "Should major new features be developed behind feature flags for gradual rollout?"
  * "Is there a requirement to create seed scripts to populate the development database with realistic test data?"

### **4. Document Structure**

*(The generated task list should follow this comprehensive structure.)*

```markdown
# MVP Task Breakdown: [Project Name]

## 1. Overview
- **Goal:** [A brief, one-sentence summary of the product's goal, derived from `/docs/01_create_brief_audience.md`.]
- **Approach:** [A high-level summary of the technical strategy, derived from `/docs/05_create_technical_plan.md`.]
- **Key Dependencies:**
    - [List any blocking external dependencies, e.g., "Requires access keys for the Stripe API."]
    - [List any internal module dependencies, e.g., "Frontend components rely on the CMS schema being finalized."]

## 2. Setup & Prerequisites
- **Requirements:** [List required tools, access, or environment setup steps from the Technical Plan, e.g., "Requires Node.js v18+ and access to the Sanity.io project."]

---

## 3. Tasks

- [ ] **1.0 Parent Task: Foundational Setup & Configuration**
    - [ ] 1.1 Initialize project repository with the chosen stack (e.g., Next.js).
    - [ ] 1.2 Configure CMS schema based on the content models in `05_create_technical_plan.mdc`.
    - [ ] 1.3 Set up hosting environments (Staging, Production) on the selected provider.
    - [ ] 1.4 Implement the core design system (colors, typography) from `04_create_design_content.mdc` as global styles.

- [ ] **2.0 Parent Task: Build Homepage**
    - [ ] 2.1 Develop the reusable Navigation and Footer components from the wireframes.
    - [ ] 2.2 Build the Hero section component using the final copy and assets.
    - [ ] 2.3 Build the Services Overview and Social Proof components.
    - [ ] 2.4 Assemble the Homepage by integrating all components and fetching content from the CMS.
    - [ ] 2.5 Write unit and integration tests for all Homepage components.

- [ ] **3.0 Parent Task: Build Service Pages**
    - [ ] 3.1 Create a dynamic page template for individual service pages.
    - [ ] 3.2 Develop the components required for the service page wireframe (e.g., Features/Benefits grid, CTA Banner).
    - [ ] 3.3 Ensure the template correctly pulls dynamic content from the CMS based on the URL.
    - [ ] 3.4 Write unit and integration tests for the service page template and its components.

- [ ] **4.0 Parent Task: Integrations & Deployment**
    - [ ] 4.1 Implement the analytics tracking from `05_create_technical_plan.mdc`.
    - [ ] 4.2 Configure the production build pipeline, including all environment variables.
    - [ ] 4.3 Perform end-to-end testing on the staging environment.
    - [ ] 4.4 Prepare for launch (final DNS changes, domain verification).
```

### **5. Quality Assurance Framework**

  - [ ] Does the task list cover every **In-Scope (Core MVP Features)** item from `/docs/01_create_brief_audience.md`?
  - [ ] Do the tasks accurately reflect the visual design and wireframes in `/docs/04_create_design_content.md`?
  - [ ] Are all foundational tasks from `/docs/05_create_technical_plan.md` (like setup, CMS config, deployment) included?
  - [ ] Are tasks for implementing analytics and meeting technical SEO requirements from the technical plan present?
  - [ ] Are testing and security requirements integrated into the tasks, not just as a final step?

### **6. Integration with Other Documentation**

This rule is the **culmination of the entire process**, synthesizing the five previous documents into an executable plan. It is not a source for future documents but rather the final output of the planning phase. Its integrity depends entirely on the quality of the preceding documents.

### **7. Best Practices**

1.  **Break It Down:** Decompose large epics into small, manageable tasks that can ideally be completed in 1-2 days.
2.  **Be Explicit:** Clearly state the acceptance criteria for each task.
3.  **Test Early, Test Often:** Integrate testing tasks within each parent task, not as a separate, final phase.
4.  **Order Matters:** Sequence tasks logically to account for dependencies (e.g., build the CMS schema before the frontend that uses it).
5.  **Think About the End Game:** Include tasks for deployment, monitoring, and documentation from the beginning.

### **8. Output Requirements**

  - **Format:** Markdown (`.md`) with checkboxes.
  - **Location:** `/tasks/`
  - **Filename:** `mvp_tasks.md`
  - **Audience:** Primarily Developers, QA Engineers, and Project Managers.
  - **Style:** Action-oriented, clear, and structured as a checklist.

### **9. Final Instructions**

1.  **DO NOT** generate tasks for features listed as "Out of Scope" in the Product Brief.
2.  **DO** create separate tasks for writing code, writing tests, and configuring infrastructure.
3.  **DO** reference the source document where helpful (e.g., "Implement button styles as per section 1.1 of `/docs/04_create_design_content.md`").
4.  **DO** structure the output to be easily copy-pasted into project management tools like Jira, Asana, or GitHub Issues.

### **10. Key Success Factors**

1.  **Comprehensive Coverage:** Every requirement from the source documents maps to one or more specific tasks.
2.  **Actionability:** A developer can pick up any task and understand exactly what needs to be done.
3.  **Traceability:** The link between a task and the original requirement, design, or architectural decision is clear.
4.  **Integrated Quality:** Testing, security, and accessibility are treated as first-class development tasks.
5.  **Efficiency:** The final list accelerates development by providing a clear, sequential, and agreed-upon plan of action.