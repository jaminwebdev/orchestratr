---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Comprehensive Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should provide clear, actionable guidance for a developer to implement the feature effectively while ensuring quality, maintainability, and alignment with project standards.

The task list must ensure alignment with existing key project documentation, include comprehensive testing strategies, consider deployment and monitoring requirements, and provide realistic effort estimates to enable proper project planning.

## Process

### Phase 1: Analysis & Planning

1. **Receive PRD Reference:** The user provides the filename or path of the specific PRD document to analyze.

2. **Comprehensive PRD Analysis:** The AI reads and analyzes all PRD sections, focusing on:
   - Functional and non-functional requirements
   - User stories and acceptance criteria
   - Technical considerations and constraints
   - Success metrics and analytics requirements
   - Security and compliance needs
   - Performance requirements
   - Integration dependencies

3. **Cross-Reference Documentation:** Consult existing documentation to ensure task planning aligns with broader system:
   - Product Brief (`product-brief.md`)
   - Features Document (`market-user-research.md`)
   - User Personas (`feature-spec.md`)
   - User Flows (`design-guidelines.md`)
   - Architecture & System Design (`architecture.md`)
   - UX & Design Considerations (`metrics_risks.md`)

4. **Identify Dependencies & Blockers:** Analyze potential dependencies, integration points, and blocking issues that could impact development sequence.

5. **Assess Implementation Complexity:** Evaluate technical complexity, effort estimation, and resource requirements.

### Phase 2: High-Level Task Generation

6. **Generate Parent Tasks:** Create 4-8 high-level tasks covering major implementation areas:
   - Planning & Setup
   - Backend/API Development
   - Frontend/UI Development
   - Integration & Testing
   - Security & Compliance
   - Deployment & Monitoring
   - Documentation & Training

7. **Present Parent Tasks:** Show high-level tasks without sub-tasks for user review.

8. **User Confirmation:** Pause and ask:
   > "I have generated the high-level tasks based on the PRD analysis. These cover [brief summary of main areas]. Ready to generate detailed sub-tasks? Respond with 'Go' to proceed, or provide feedback if you'd like changes to the high-level structure."

### Phase 3: Detailed Task Breakdown

9. **Generate Comprehensive Sub-Tasks:** Break down each parent task into specific, actionable sub-tasks including:
   - Implementation steps
   - Testing requirements
   - Code review checkpoints
   - Documentation updates
   - Quality assurance validations

10. **File Structure Planning:** Identify all files to be created, modified, or deleted with clear rationale.

11. **Effort Estimation:** Provide realistic time estimates for each task cluster.

12. **Quality Gates:** Include validation checkpoints throughout the development process.

### Phase 4: Output Generation

13. **Generate Comprehensive Output:** Combine all elements into structured Markdown document.

14. **Validate Completeness:** Ensure all PRD requirements are covered in task breakdown.

15. **Save Task List:** Save as `tasks-[prd-file-name]-[date].md` in `/tasks/` directory.

## Enhanced Clarifying Questions

Before generating tasks, the AI may ask:

### Scope & Priority Clarification
* **MVP vs Full Feature:** "Should this task list focus on MVP delivery or the complete feature as described?"
* **Timeline Constraints:** "Are there specific deadlines or sprint boundaries to consider?"
* **Resource Availability:** "How many developers will work on this? Any skill level considerations?"

### Technical Environment
* **Development Stack:** "Are there any technology stack preferences or constraints not mentioned in the PRD?"
* **Testing Requirements:** "What's the expected test coverage level? Are there specific testing frameworks to use?"
* **Deployment Strategy:** "Will this be deployed incrementally or as a complete feature?"

### Integration Concerns
* **Breaking Changes:** "Are breaking changes acceptable, or must this maintain backward compatibility?"
* **Feature Flags:** "Should this be implemented behind feature flags for gradual rollout?"
* **Data Migration:** "Are there existing data structures that need migration or transformation?"

## Enhanced Output Format

### Executive Summary
- **Feature Overview:** Brief description and business impact
- **Implementation Approach:** High-level strategy and key decisions
- **Timeline Estimate:** Overall effort and critical path
- **Risk Assessment:** Major risks and mitigation strategies

### Development Environment Setup
- **Prerequisites:** Required tools, access, and dependencies
- **Local Setup:** Environment configuration steps
- **Testing Setup:** Test data and environment requirements

### Relevant Files & Architecture

#### New Files to Create
- `path/to/component/NewFeature.tsx` - Main feature component with [specific functionality]
- `path/to/component/NewFeature.test.tsx` - Comprehensive unit tests
- `path/to/api/feature-endpoint.ts` - API endpoint handling [specific operations]
- `path/to/api/feature-endpoint.test.ts` - API endpoint tests
- `types/feature-types.ts` - TypeScript interfaces and types
- `lib/validators/feature-validator.ts` - Input validation logic
- `lib/validators/feature-validator.test.ts` - Validation tests

#### Files to Modify
- `path/to/existing/Router.tsx` - Add new route definitions
- `path/to/existing/Navigation.tsx` - Update navigation menu
- `path/to/database/schema.sql` - Database schema updates
- `config/permissions.ts` - Add new permission definitions

#### Configuration & Documentation
- `docs/features/new-feature.md` - Feature documentation
- `docs/api/feature-endpoints.md` - API documentation
- `.env.example` - Environment variable updates
- `package.json` - New dependency additions (if any)

### Implementation Notes
- **Code Standards:** Follow existing patterns in `[reference-file.ts]`
- **Testing Strategy:** Aim for 80%+ test coverage, focus on critical paths
- **Error Handling:** Implement consistent error patterns per `lib/error-handler.ts`
- **Performance:** Consider caching strategies for [specific operations]
- **Security:** Validate all inputs, sanitize outputs, check permissions

### Database Considerations
- **Schema Changes:** Required table modifications or additions
- **Migration Scripts:** Database migration requirements
- **Indexing:** Performance optimization considerations
- **Backup Strategy:** Data safety during deployment

## Comprehensive Task Structure

### Pre-Development Phase
- [ ] **0.1 Project Setup & Analysis**
  - [ ] 0.1.1 Review PRD and gather clarifications
  - [ ] 0.1.2 Analyze existing codebase and architecture
  - [ ] 0.1.3 Identify integration points and dependencies
  - [ ] 0.1.4 Create development branch and set up environment
  - [ ] 0.1.5 Design database schema changes (if applicable)
  - [ ] 0.1.6 Plan API endpoints and data models
  - [ ] 0.1.7 Create technical design document
  - [ ] 0.1.8 Get technical design approved by team

### Backend Development
- [ ] **1.0 Database & Data Layer** *(Estimated: [X] hours)*
  - [ ] 1.1 Create/modify database schema
  - [ ] 1.2 Write migration scripts
  - [ ] 1.3 Create data models and interfaces
  - [ ] 1.4 Implement data access layer
  - [ ] 1.5 Write unit tests for data layer
  - [ ] 1.6 Test migration scripts in development environment

- [ ] **2.0 API Development** *(Estimated: [X] hours)*
  - [ ] 2.1 Implement API endpoints
  - [ ] 2.2 Add input validation and sanitization
  - [ ] 2.3 Implement authentication and authorization
  - [ ] 2.4 Add error handling and logging
  - [ ] 2.5 Write comprehensive API tests
  - [ ] 2.6 Update API documentation
  - [ ] 2.7 Test API endpoints with Postman/similar tool

### Frontend Development
- [ ] **3.0 UI Components** *(Estimated: [X] hours)*
  - [ ] 3.1 Create base UI components
  - [ ] 3.2 Implement form handling and validation
  - [ ] 3.3 Add responsive design considerations
  - [ ] 3.4 Implement accessibility features
  - [ ] 3.5 Write component unit tests
  - [ ] 3.6 Create Storybook stories (if applicable)

- [ ] **4.0 Feature Integration** *(Estimated: [X] hours)*
  - [ ] 4.1 Integrate with API endpoints
  - [ ] 4.2 Implement state management
  - [ ] 4.3 Add error handling and loading states
  - [ ] 4.4 Implement user feedback mechanisms
  - [ ] 4.5 Write integration tests
  - [ ] 4.6 Test user flows end-to-end

### Quality Assurance & Testing
- [ ] **5.0 Comprehensive Testing** *(Estimated: [X] hours)*
  - [ ] 5.1 Unit test coverage review (target: 80%+)
  - [ ] 5.2 Integration testing
  - [ ] 5.3 End-to-end testing
  - [ ] 5.4 Performance testing
  - [ ] 5.5 Security testing
  - [ ] 5.6 Accessibility testing
  - [ ] 5.7 Cross-browser/device testing
  - [ ] 5.8 User acceptance testing preparation

### Security & Compliance
- [ ] **6.0 Security Implementation** *(Estimated: [X] hours)*
  - [ ] 6.1 Security review of all endpoints
  - [ ] 6.2 Input validation and sanitization audit
  - [ ] 6.3 Authentication and authorization testing
  - [ ] 6.4 Data privacy compliance check
  - [ ] 6.5 Vulnerability scanning
  - [ ] 6.6 Security documentation update

### Performance & Monitoring
- [ ] **7.0 Performance Optimization** *(Estimated: [X] hours)*
  - [ ] 7.1 Database query optimization
  - [ ] 7.2 Frontend performance audit
  - [ ] 7.3 Caching strategy implementation
  - [ ] 7.4 Monitoring and logging setup
  - [ ] 7.5 Analytics implementation
  - [ ] 7.6 Performance benchmarking

### Documentation & Knowledge Transfer
- [ ] **8.0 Documentation** *(Estimated: [X] hours)*
  - [ ] 8.1 Update technical documentation
  - [ ] 8.2 Create user documentation
  - [ ] 8.3 Update API documentation
  - [ ] 8.4 Create troubleshooting guide
  - [ ] 8.5 Document deployment procedures
  - [ ] 8.6 Prepare team knowledge transfer session

### Deployment & Launch
- [ ] **9.0 Deployment Preparation** *(Estimated: [X] hours)*
  - [ ] 9.1 Code review and approval
  - [ ] 9.2 Staging environment deployment
  - [ ] 9.3 Staging environment testing
  - [ ] 9.4 Production deployment plan review
  - [ ] 9.5 Rollback plan preparation
  - [ ] 9.6 Feature flag configuration (if applicable)

- [ ] **10.0 Production Deployment** *(Estimated: [X] hours)*
  - [ ] 10.1 Deploy to production environment
  - [ ] 10.2 Smoke testing in production
  - [ ] 10.3 Monitor system metrics and logs
  - [ ] 10.4 Gradual feature rollout (if applicable)
  - [ ] 10.5 User communication and training
  - [ ] 10.6 Post-deployment validation

### Post-Launch Activities
- [ ] **11.0 Post-Launch Monitoring** *(Estimated: [X] hours)*
  - [ ] 11.1 Monitor success metrics for [X] days
  - [ ] 11.2 Gather user feedback
  - [ ] 11.3 Address immediate issues or bugs
  - [ ] 11.4 Performance monitoring and optimization
  - [ ] 11.5 Success metrics analysis and reporting
  - [ ] 11.6 Plan future iterations or improvements

## Quality Gates & Checkpoints

### Code Quality Standards
- [ ] Code follows established style guide
- [ ] All functions have appropriate documentation
- [ ] Error handling is comprehensive and consistent
- [ ] Performance considerations are addressed
- [ ] Security best practices are followed

### Testing Requirements
- [ ] Unit tests pass with 80%+ coverage
- [ ] Integration tests validate all user flows
- [ ] End-to-end tests cover critical paths
- [ ] Performance tests meet requirements
- [ ] Security tests pass vulnerability scans

### Review Checkpoints
- [ ] Technical design review completed
- [ ] Code review by senior developer
- [ ] Security review completed
- [ ] UX/UI review completed
- [ ] Product owner acceptance

## Risk Assessment & Mitigation

### Technical Risks
- **Database Migration Issues:** Plan rollback strategy, test thoroughly in staging
- **API Integration Problems:** Implement comprehensive error handling, fallback mechanisms
- **Performance Degradation:** Set up monitoring, conduct load testing

### Timeline Risks
- **Scope Creep:** Clearly defined requirements, change control process
- **Dependencies:** Identify critical path, plan for delays
- **Resource Availability:** Cross-training, documentation

### Quality Risks
- **Insufficient Testing:** Comprehensive test strategy, automated testing
- **Security Vulnerabilities:** Security reviews, penetration testing
- **User Experience Issues:** User testing, feedback loops

## Success Criteria

### Technical Success
- [ ] All functional requirements implemented
- [ ] Performance targets met
- [ ] Security requirements satisfied
- [ ] Test coverage goals achieved

### Business Success
- [ ] Success metrics show positive impact
- [ ] User adoption meets expectations
- [ ] Support ticket volume remains manageable
- [ ] Stakeholder satisfaction achieved

## Interaction Model

**Phase 1:** Present high-level task structure and wait for user confirmation
**Phase 2:** After "Go" command, provide complete detailed breakdown
**Phase 3:** Available for clarifications and adjustments

## Target Audience Considerations

### Primary: Junior Developer
- Clear, step-by-step instructions
- Context for why each task is necessary
- Links to relevant documentation and examples
- Explicit acceptance criteria for each task

### Secondary: Project Manager
- Effort estimates for planning
- Dependencies and critical path identification
- Risk assessment and mitigation strategies
- Progress tracking capabilities

### Tertiary: QA Engineer
- Testing requirements and strategies
- Quality gates and checkpoints
- Acceptance criteria validation
- Bug tracking and resolution process

## Final Instructions

### Critical Success Factors
1. **Comprehensive Coverage:** Every PRD requirement must map to specific tasks
2. **Realistic Estimates:** Time estimates should account for complexity and unknowns
3. **Quality Focus:** Testing and review tasks are as important as development tasks
4. **Risk Awareness:** Identify and plan for potential issues proactively
5. **Maintainability:** Consider long-term maintenance and extensibility

### Validation Checklist
- [ ] All PRD requirements are covered in tasks
- [ ] Tasks are specific and actionable
- [ ] Dependencies are clearly identified
- [ ] Quality gates are included throughout
- [ ] Risk mitigation strategies are defined
- [ ] Success criteria are measurable
- [ ] Documentation requirements are complete


Remember: A comprehensive task list prevents delays, reduces risks, and ensures high-quality feature delivery while maintaining system integrity and user experience standards.