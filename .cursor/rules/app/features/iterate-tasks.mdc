# Rule: Task Iteration and Execution

## Goal

To guide an AI assistant in systematically executing a task list from a Markdown file (`tasks.md`). The AI's role is to update task progress, ensure every action is aligned with all project documentation, and pause at logical checkpoints for user review and version control.

This rule turns the static task list into a dynamic, interactive development process, ensuring a controlled, transparent, and high-quality implementation.

## Process

1.  **Initialization:** The AI identifies the target task file (e.g., `/tasks/07_mvp_tasks.md` or `/features/feature-x/tasks.md`) and locates the first incomplete sub-task `[ ]`.
2.  **Contextual Analysis:** Before acting, the AI reviews the current sub-task against the full context of the project by referencing:
    * The relevant **Feature PRD** (if applicable).
    * The six core documents in the `/docs/` folder to verify requirements and standards.
3.  **Propose Changes (if necessary):** If the analysis reveals a problem (e.g., a missing dependency, an ambiguous requirement), the AI will **pause and propose a solution** (e.g., "I suggest adding a new sub-task to fetch API keys first. Is that correct?"). The AI will not proceed until the user approves the change.
4.  **Execute Task:** The AI will perform the necessary actions to complete the single sub-task (e.g., writing or modifying code, creating a file).
5.  **Update Progress:** Immediately after completion, the AI will update the task list file:
    * Change the sub-task checkbox from `[ ]` to `[x]`.
    * If all sub-tasks under a parent task are now complete, mark the parent task `[x]`.
6.  **Checkpoint and Confirmation:** After saving the updated file, the AI will check its status:
    * **If a parent task was just completed,** it is a **commit checkpoint**. The AI will pause and suggest committing the work:
        > ✅ Parent task "2.0 User Onboarding" is complete. All related files have been updated. This is a good time to commit these changes to version control. Shall I proceed to the next task?
    * **If it is not a checkpoint,** the AI will simply confirm completion and ask for permission to continue to the next sub-task:
        > ✅ Sub-task 2.1 is complete. Ready to proceed to sub-task 2.2?

## Dynamic Adjustments & Proposals

This rule is not just for checking off boxes. If, during the "Contextual Analysis" phase, the AI discovers a conflict or a missing piece of logic, it should use the following protocol:

1.  **Pause Execution:** Do not attempt the flawed task.
2.  **State the Problem:** Clearly articulate the issue found (e.g., "The PRD requires a user's full name, but the database schema in `05_technical_architecture.md` only has a `username` field.").
3.  **Propose a Solution:** Suggest a specific, actionable change (e.g., "I recommend adding a `full_name` column to the `users` table. This will require a new migration script. Should I add these tasks to the list?").
4.  **Await Approval:** Do not modify any files or tasks until the user gives explicit approval.

## Quality Assurance Framework

The AI's execution of this rule will be validated against these criteria:

- [ ] Does the AI correctly identify and reference the proper, up-to-date documentation before every action?
- [ ] Is progress marked accurately and promptly in the task file?
- [ ] Does the AI successfully identify logical checkpoints (i.e., completion of a parent task) and prompt the user to commit?
- [ ] When a problem is found, does the AI propose a clear, actionable solution instead of proceeding?
- [ ] Does the AI always await explicit user confirmation before continuing to the next task?

## Integration with Other Documentation

This rule is the "engine" of the development process. It continuously consumes the task list and is guided by the entire project's documentation set.

* **Primary Input:** A `tasks.md` file from either `/tasks/` or a `/features/[feature-name]/` directory.
* **Contextual Guardrails (Must be referenced continuously):**
    * `01_product_brief.md`: To align with overall business goals.
    * `02_market_user_research.md`: To ensure the implementation is user-centric.
    * `03_feature_spec.md` or **Feature PRD**: For the specific acceptance criteria of the task.
    * `04_design_guidelines.md`: To ensure visual and UX consistency.
    * `05_technical_architecture.md`: For technical patterns, data models, and constraints.
    * `06_success_metrics_risks.md`: To ensure necessary analytics and monitoring hooks are implemented.

## Best Practices

1.  **Work Sequentially:** Complete one sub-task at a time to ensure a methodical and predictable workflow.
2.  **Communicate Clearly:** After every action, provide a concise summary of what was done and what the next step is.
3.  **Propose, Don't Assume:** Never add, remove, or change a task without proposing it to the user and getting approval first.
4.  **Embrace Checkpoints:** Use the completion of parent tasks as natural milestones for saving work and ensuring stability.

## Output Requirements

-   **Format:** A continuously updated Markdown file with checked boxes `[x]`.
-   **Location:** The same `tasks.md` file that was provided as input.
-   **Audience:** The user, who is acting as the project manager or lead developer, reviewing progress and making decisions.

## Final Instructions

1.  **DO NOT** proceed to the next task without explicit user confirmation (e.g., "yes", "go", "continue").
2.  **DO** suggest a commit to version control every time a parent task is fully completed.
3.  **DO** re-read all relevant documentation before starting *any* new task to ensure you have the latest context.
4.  **DO NOT** execute multiple sub-tasks at once. The flow is always: **Analyze -> Execute -> Update -> Confirm.**

## Key Success Factors

1.  **Controlled Execution:** The process is predictable and prevents the AI from running ahead or making unapproved changes.
2.  **Traceability:** Every action taken by the AI is a direct response to a specific task, which is traceable back to a requirement.
3.  **Adaptability:** The framework allows for dynamic changes to the plan based on new insights discovered during development.
4.  **Alignment:** Continuous referencing of the core documents ensures the final implementation is perfectly aligned with the project's foundation.