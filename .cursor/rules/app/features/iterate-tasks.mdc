---
description: 
globs: 
alwaysApply: false
---
# Rule: Enhanced Task List Management and Iteration for Feature Implementation

## Goal

To guide an AI assistant in managing and iterating on a task list (in Markdown format) derived from either a Product Requirements Document (PRD) **or** from the foundational MVP task list (`/tasks/tasks-create-mvp.md`). The AI must ensure rigorous, quality-driven feature implementation by:

- Following task dependencies and proper sequencing
- Implementing comprehensive quality gates and validation checkpoints
- Maintaining real-time progress tracking and documentation alignment
- Conducting thorough pre-task analysis and post-task validation
- Pausing for user approval with detailed completion reports

This approach ensures controlled, transparent, traceable, and high-quality product development that aligns with established standards and architecture.

---

## Enhanced Task Iteration Framework

### Phase 1: Pre-Task Analysis & Preparation

Before starting any sub-task, the AI must:

#### 1.1 Comprehensive Context Review
- **Review PRD Requirements:** Validate that the current task addresses specific PRD requirements
- **Architecture Alignment:** Ensure implementation follows established patterns in `architecture.md.md`
- **Design System & Security Compliance:** Verify adherence to `design-guidelines.md` standards
- **User Flow Integration:** Confirm task fits within established `feature-spec.md` patterns

#### 1.2 Technical Preparation
- **Dependency Verification:** Confirm all prerequisite tasks are truly complete
- **Environment Validation:** Ensure development environment meets task requirements
- **Resource Availability:** Verify access to necessary tools, APIs, and data
- **Integration Points:** Identify all systems that will be affected by this task

#### 1.3 Quality Planning
- **Testing Strategy:** Define specific testing approach for this task
- **Acceptance Criteria:** Establish clear, measurable completion criteria
- **Risk Assessment:** Identify potential issues and mitigation strategies
- **Rollback Plan:** Define how to undo changes if problems arise

### Phase 2: Implementation with Quality Gates

#### 2.1 Structured Implementation Process
- **Start Implementation:** Begin work following established coding standards
- **Incremental Progress:** Implement in small, testable increments
- **Continuous Validation:** Test each increment against acceptance criteria
- **Documentation Updates:** Update relevant docs as implementation progresses

#### 2.2 Quality Checkpoints During Implementation
- **Code Quality:** Validate adherence to established patterns and standards
- **Performance Impact:** Monitor and test performance implications
- **Security Validation:** Verify security requirements are met
- **Integration Testing:** Test all affected integration points
- **User Experience:** Validate UX consistency and accessibility

### Phase 3: Post-Task Validation & Reporting

#### 3.1 Comprehensive Completion Validation
- **Functional Testing:** Verify all functional requirements are met
- **Non-Functional Testing:** Validate performance, security, and usability
- **Integration Verification:** Confirm all system integrations work correctly
- **Documentation Accuracy:** Ensure all documentation reflects current state
- **Edge Case Coverage:** Test unusual scenarios and error conditions

#### 3.2 Impact Assessment
- **System Impact:** Evaluate effects on existing functionality
- **Performance Metrics:** Measure and report performance changes
- **Security Posture:** Assess any security implications
- **User Experience:** Evaluate UX impact and consistency

#### 3.3 Documentation Updates
- **Code Documentation:** Update inline comments and technical docs
- **API Documentation:** Refresh API specs if endpoints changed
- **User Documentation:** Update user-facing documentation
- **Architecture Documentation:** Reflect any architectural changes

---

## Enhanced Task List Management Protocol

### Real-Time Progress Tracking

#### Task Status Management
- **[ ]** Not Started
- **[→]** In Progress (with timestamp)
- **[✓]** Completed and Validated
- **[!]** Blocked or Issues Identified
- **[?]** Requires Clarification

#### Progress Annotations
```markdown
- [✓] **1.1 Database Schema Design** *(Completed: 2024-01-15 14:30)*
  - Created user_preferences table with proper indexing
  - Validated schema against existing patterns
  - Performance tested with sample data
  - Security reviewed for data exposure risks
  - **Files Modified:** `database/schema/user_preferences.sql`, `database/migrations/001_add_user_prefs.sql`
```

### Enhanced File Tracking System

#### Comprehensive File Management
```markdown
### Relevant Files & Changes

#### Files Created
- `src/components/UserPreferences.tsx` - Main user preferences component with form validation
- `src/components/UserPreferences.test.tsx` - Comprehensive unit tests (95% coverage)
- `src/api/user-preferences.ts` - API endpoints for CRUD operations
- `src/types/user-preferences.ts` - TypeScript interfaces and validation schemas
- `src/hooks/useUserPreferences.ts` - Custom React hook for state management

#### Files Modified
- `src/components/Navigation.tsx` - Added preferences menu item (lines 45-48)
- `src/api/routes.ts` - Added new preference routes (lines 23-26)
- `database/schema.sql` - Added user_preferences table (lines 156-167)
- `src/types/api-responses.ts` - Added preference response types (lines 89-102)

#### Files Deleted
- `src/components/LegacyPrefs.tsx` - Removed deprecated preference component
- `src/utils/old-prefs-helper.ts` - Consolidated into new preference utilities

#### Configuration Changes
- `.env.example` - Added PREFERENCES_CACHE_TTL environment variable
- `package.json` - Added yup validation library for form schemas
```

### Quality Assurance Tracking

#### Test Coverage Requirements
- **Unit Tests:** 80%+ coverage for new code
- **Integration Tests:** All API endpoints tested
- **E2E Tests:** Critical user flows validated
- **Performance Tests:** Load testing for new features
- **Security Tests:** Vulnerability scanning completed

#### Documentation Requirements
- **Technical Documentation:** Architecture changes documented
- **API Documentation:** New endpoints properly documented
- **User Documentation:** Help content updated
- **Change Log:** All changes tracked for release notes

---

## Enhanced Completion Reporting Protocol

### Detailed Completion Report Template

When a sub-task is completed, provide this comprehensive report:

```markdown
## Sub-Task Completion Report

### Task: [Task Name and Number]
**Status:** ✅ COMPLETED
**Completion Time:** [Timestamp]
**Estimated vs Actual:** [X hours estimated, Y hours actual]

### Implementation Summary
- **Primary Deliverable:** [What was built/implemented]
- **Key Features:** [List of main features delivered]
- **Technical Approach:** [Brief description of implementation strategy]

### Quality Validation Results
- **Functional Testing:** ✅ All acceptance criteria met
- **Performance Testing:** ✅ Response times within requirements
- **Security Testing:** ✅ No vulnerabilities identified
- **Integration Testing:** ✅ All integrations working correctly
- **Code Review:** ✅ Approved by [standards/patterns]

### Files Impacted
- **Created:** [X files] - [Brief description]
- **Modified:** [Y files] - [Brief description]
- **Deleted:** [Z files] - [Brief description]

### Dependencies & Integration
- **Completed Dependencies:** [List of dependencies satisfied]
- **Enables Next Tasks:** [List of tasks now unblocked]
- **Integration Points:** [Systems successfully integrated]

### Issues & Resolutions
- **Challenges Encountered:** [Any issues found and resolved]
- **Technical Decisions:** [Key decisions made during implementation]
- **Deviations from Plan:** [Any necessary changes to original approach]

### Success Metrics
- **Performance Metrics:** [Specific measurements if applicable]
- **Test Coverage:** [Percentage and details]
- **Quality Score:** [Based on established criteria]

### Next Steps Preparation
- **Immediate Blockers Removed:** [What's now ready for next tasks]
- **Recommended Next Task:** [Suggestion for optimal flow]
- **Potential Risks Ahead:** [Awareness of upcoming challenges]

### Stakeholder Impact
- **User Experience:** [How this affects end users]
- **Developer Experience:** [How this affects future development]
- **System Performance:** [Any performance implications]
```

---

## Risk Management & Contingency Planning

### Proactive Risk Assessment

#### Before Each Task
- **Technical Risks:** Complexity, dependencies, unknowns
- **Timeline Risks:** Effort estimation accuracy, resource availability
- **Quality Risks:** Testing coverage, integration complexity
- **Business Risks:** Scope creep, requirement changes

#### Risk Mitigation Strategies
- **Technical:** Proof of concepts, incremental implementation
- **Timeline:** Buffer time, parallel task execution where possible
- **Quality:** Comprehensive testing, code review checkpoints
- **Business:** Regular stakeholder communication, scope validation

### Issue Escalation Protocol

#### Blocking Issues
When a task cannot be completed due to:
- **Missing Dependencies:** Clearly identify what's needed
- **Technical Constraints:** Document limitations and alternatives
- **Resource Limitations:** Specify additional resources required
- **Requirement Ambiguity:** Highlight areas needing clarification

#### Escalation Process
1. **Document the Issue:** Clear description with context
2. **Assess Impact:** Timeline and scope implications
3. **Propose Solutions:** Multiple options with trade-offs
4. **Seek Stakeholder Input:** Present options for decision
5. **Update Task List:** Reflect new reality and dependencies

---

## Enhanced User Interaction Protocol

### Pre-Task Confirmation
Before starting each sub-task, present:
```markdown
## Ready to Begin: [Task Name]

### Context & Preparation
- **Task Overview:** [Brief description]
- **Dependencies Verified:** [List of completed prerequisites]
- **Expected Deliverables:** [What will be produced]
- **Estimated Effort:** [Time estimate]
- **Risk Assessment:** [Potential challenges identified]

### Quality Commitments
- **Testing Strategy:** [How this will be tested]
- **Documentation Updates:** [What docs will be updated]
- **Integration Verification:** [How integrations will be validated]

**Ready to proceed? (y/n)**
```

### Post-Task Approval Request
After completing each sub-task:
```markdown
## Sub-Task Completed: [Task Name]

[Comprehensive Completion Report as detailed above]

---

### Updated Task List
[Present updated task list with progress marked]

---

### Validation Complete
✅ All quality gates passed
✅ Documentation updated
✅ Integration verified
✅ Ready for next phase

**Approve to continue to next sub-task? (y/n)**
```

---

## Success Metrics & Continuous Improvement

### Task Completion Metrics
- **Completion Rate:** Percentage of tasks completed on first attempt
- **Quality Score:** Based on test coverage, code review, and integration success
- **Timeline Accuracy:** Estimated vs. actual completion times
- **Defect Rate:** Issues discovered post-completion

### Process Improvement
- **Retrospective Analysis:** Learn from completed tasks
- **Pattern Recognition:** Identify recurring challenges
- **Process Refinement:** Continuously improve task breakdown and execution
- **Knowledge Capture:** Document lessons learned for future features

---

## Critical Success Factors

### Non-Negotiable Requirements
1. **Quality First:** Never compromise on testing, security, or performance
2. **Documentation Integrity:** All changes must be properly documented
3. **Architecture Alignment:** Maintain consistency with established patterns
4. **User-Centric Approach:** Keep end-user impact in focus
5. **Transparency:** Maintain clear communication about progress and issues

### Validation Checkpoints
- **Pre-Task:** Preparation and planning validated
- **Mid-Task:** Progress and quality checkpoints
- **Post-Task:** Comprehensive validation and approval
- **Integration:** System-wide impact assessment

---

## Summary & Key Principles

### Core Workflow
1. **Thorough Preparation:** Comprehensive analysis before starting
2. **Quality-Driven Implementation:** Continuous validation during work
3. **Comprehensive Reporting:** Detailed completion documentation
4. **User Approval Gates:** Explicit permission before proceeding
5. **Continuous Improvement:** Learning and refinement throughout

### Fundamental Principles
- **One Sub-Task Focus:** Complete attention to current task
- **Quality Over Speed:** Thorough implementation preferred
- **Transparency:** Clear communication about all aspects
- **Alignment:** Consistent with overall product vision
- **Accountability:** Measurable outcomes and validation


This enhanced framework ensures that every task is completed with the highest quality standards while maintaining clear communication and alignment with broader product objectives.