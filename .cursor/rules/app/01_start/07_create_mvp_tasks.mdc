# Rule: MVP Task Breakdown Generation

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format. This task list is generated by synthesizing all prior project documentation (found in `/docs/`) and serves as the ultimate engineering plan for building the Minimum Viable Product (MVP).

The generated task list must provide clear, actionable guidance for developers, integrate comprehensive testing and security from the start, consider deployment and monitoring, and be fully traceable back to the project's strategic goals, feature specifications, and technical architecture.

## Process

1.  **Comprehensive Document Analysis (Dependencies):** The process MUST begin with a thorough analysis of the entire `/docs` folder to synthesize a complete project view, including all six preceding documents (`01` through `06`).
2.  **Conduct Structured Discovery:** Use the clarifying questions to resolve any ambiguities regarding scope, priority, and technical environment.
3.  **Generate High-Level Parent Tasks:** Synthesize all inputs to create 4-6 high-level parent tasks, a summary of dependencies, and a list of files likely to be impacted.
4.  **User Confirmation:** Present the high-level plan and pause for user review. Prompt with:
    > "I've outlined the high-level tasks for this feature, along with key dependencies and relevant files. Please review them. Are you ready to proceed with generating the detailed sub-tasks? Respond with 'Go' to continue."
5.  **Generate Detailed Sub-Tasks:** Upon receiving user confirmation ("Go"), generate the full, detailed task list with all sub-tasks for each parent task.
6.  **Final Quality Assurance:** Use the `Quality Assurance Framework` to ensure the final, complete task list is coherent and actionable.
7.  **Save and Version:** Save the final comprehensive task list as `07_mvp_tasks.md` in the `/tasks/` directory.

## Discovery Framework

### Scope & Priority Clarification

  * **MVP Focus:** "This task list will focus strictly on the Must-Have features defined for the MVP. Is that correct?"
  * **Timeline Constraints:** "Are there any specific deadlines or sprint boundaries I should consider when structuring the tasks?"
  * **Resource Availability:** "How many developers will be working on this? This will help in structuring tasks for potential parallel work."

### Technical Environment

  * **Testing Requirements:** "What is the expected code coverage percentage for unit tests? Are there specific frameworks to use that aren't in the architecture doc?"
  * **Feature Flags:** "Should major new features be developed behind feature flags for gradual rollout or A/B testing?"
  * **Data Seeding:** "Is there a requirement to create seed scripts to populate the development database with realistic test data?"

### Integration Concerns

  * **Breaking Changes:** "Based on the architecture, it seems we are building new endpoints. Are there any existing systems we must maintain backward compatibility with that were not explicitly mentioned?"
  * **Data Migration:** "Are there any existing data sources that need a one-time migration into the new system?"

## Document Structure (for the output .md file)

The generated task list should follow this comprehensive structure:

```markdown
# MVP Task Breakdown: [Product Name]

## 1. Overview
- **Goal:** [A brief, one-sentence summary of the feature and its business impact, derived from the Product Brief.]
- **Approach:** [A high-level summary of the technical strategy, derived from the Technical Architecture.]
- **Dependencies:**
    - [List any blocking external dependencies, e.g., "Requires API `X` from Team Y to be ready."]
    - [List any internal module dependencies, e.g., "Relies on the `AuthModule` for user authentication."]

## 2. Setup & Relevant Files
- **Prerequisites:** [List required tools, access, or environment setup steps, e.g., "Requires Node.js v18+ and Docker."].
- **Relevant Files:**
    - `path/to/potential/file1.ts` - Contains the main component for this feature.
    - `path/to/file1.test.ts` - Unit tests for `file1.ts`.
    - `path/to/another/file.tsx` - API route handler for data submission.
    - `path/to/another/file.test.tsx` - Unit tests for `another/file.tsx`.

---

## 3. Tasks

- [ ] **1.0 Parent Task Title:** [Brief summary, e.g., Foundational Setup]
    - [ ] 1.1 Implement [Specific sub-task related to backend/API]
    - [ ] 1.2 Write comprehensive unit tests for [Module name]
- [ ] **2.0 Parent Task Title:** [Brief summary, e.g., User Onboarding Feature]
    - [ ] 2.1 Implement [Specific sub-task related to frontend/UI]
    - [ ] 2.2 Develop [Specific sub-task related to backend/API]
    - [ ] 2.3 Create [Specific sub-task for data handling/persistence]
    - [ ] 2.4 Write comprehensive unit tests for [Component/Module name]
    - [ ] 2.5 Document [Specific aspect, e.g., API usage, new component]
- [ ] **3.0 Parent Task Title:** [Brief summary from PRD]
    - [ ] 3.1 [Sub-task description 3.1]

```

## Quality Assurance Framework

### Rule Validation Checklist

  - [ ] Does the task list cover every **Must-Have** feature from `03_feature_spec.md`?
  - [ ] Are foundational tasks from `05_technical_architecture.md` (like setup, auth, logging) included?
  - [ ] Are tasks for implementing analytics from `06_success_metrics_risks.md` present?
  - [ ] Are the tasks specific, actionable, and granular enough for a developer to work on?
  - [ ] Are testing and security requirements integrated into the tasks, not just as a final step?
  - [ ] Is the file manifest a plausible reflection of the required work?

## Integration with Other Documentation

This rule is the **culmination of the entire process**, synthesizing all previous documents into an executable plan. It is not a source for future documents but rather the final output of the planning phase. Its integrity depends entirely on the quality and completeness of the six preceding documents. Traceability is key: every task should implicitly map back to a requirement in a source document.

## Best Practices

1.  **Break It Down:** Decompose large epics into small, manageable tasks that can ideally be completed in 1-2 days.
2.  **Be Explicit:** Clearly state the acceptance criteria for each task or reference the user story from the feature spec.
3.  **Test Early, Test Often:** Integrate testing tasks within each epic, not as a separate, final phase.
4.  **Order Matters:** Sequence tasks logically to account for dependencies (e.g., build the backend endpoint before the frontend that uses it).
5.  **Think About the End Game:** Include tasks for deployment, monitoring, and documentation from the beginning.

## Output Requirements

  - **Format:** Markdown (`.md`) with checkboxes.
  - **Location:** `/tasks/`
  - **Filename:** `07_mvp_tasks.md`
  - **Audience:** Primarily Developers, but also QA Engineers for test planning and Project Managers for tracking progress.
  - **Style:** Action-oriented, clear, and structured as a checklist.

## Final Instructions

1.  **DO NOT** generate tasks for features outside the defined MVP scope.
2.  **DO** create separate tasks for writing code, writing tests, and writing documentation.
3.  **DO** reference the source document (e.g., "Implement as per section 4.2 of the tech architecture") where helpful.
4.  **DO** structure the output to be easily copy-pasted into project management tools like Jira, Asana, or GitHub Issues.

## Key Success Factors

1.  **Comprehensive Coverage:** Every requirement from the source documents maps to one or more specific tasks.
2.  **Actionability:** A developer can pick up any task and understand exactly what needs to be done without significant clarification.
3.  **Traceability:** The link between a task and the original user story, design guideline, or architectural decision is clear.
4.  **Integrated Quality:** Testing, security, and accessibility are treated as first-class development tasks, not afterthoughts.
5.  **Efficiency:** The final list accelerates development by providing a clear, sequential, and agreed-upon plan of action.